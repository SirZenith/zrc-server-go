CREATE TABLE CORE ( 
	CORE_ID              number(2)  NOT NULL,
	CORE_NAME            varchar2(20)  NOT NULL,
	INTERNAL_ID          char(24)  NOT NULL,
	CONSTRAINT PK_CORES_ID PRIMARY KEY ( CORE_ID ) 
 );

CREATE TABLE GAME_INFO ( 
	IS_APRILFOOLS        char(1)  ,
	MAX_STAMINA          number(2)  NOT NULL,
	STAMINA_RECOVER_TICK number(7)  NOT NULL,
	CORE_EXP             number(5)  NOT NULL,
	WORLD_RANKING_ENABLED char(1)  ,
	IS_BYD_CHAPTER_UNLOCKED char(1)  
 );

CREATE TABLE LEVEL_EXP ( 
	LV                   number(2)  NOT NULL,
	EXP_VAL              number(5)  NOT NULL,
	CONSTRAINT PK_LEVEL_EXP_LV PRIMARY KEY ( LV ) 
 );

CREATE TABLE PACK ( 
	PACK_NAME            varchar2(20)  NOT NULL,
	PRICE                number(4) DEFAULT 0 NOT NULL,
	ORIG_PRICE           number(4) DEFAULT 0 NOT NULL,
	DISCOUNT_FROM        number(13) DEFAULT 1491868801000 ,
	DISCOUNT_TO          number(13) DEFAULT 1491868801000 ,
	CONSTRAINT PK_PACKS_NAME PRIMARY KEY ( PACK_NAME ) 
 );

CREATE TABLE PACK_ITEM ( 
	PACK_NAME            varchar2(20)  NOT NULL,
	ITEM_ID              varchar2(50)  NOT NULL,
	ITEM_TYPE            varchar2(10)  NOT NULL,
	IS_AVAILABLE         char(1)  ,
	CONSTRAINT PK_PACK_ITEM_ITEM_ID PRIMARY KEY ( ITEM_ID ) 
 );

CREATE TABLE PARTNER ( 
	PART_ID              number(2)  NOT NULL,
	SKILL_ID             varchar2(40)  ,
	SKILL_ID_UNCAP       varchar2(40)  ,
	CHAR_TYPE            number(1) DEFAULT 0 NOT NULL,
	SKILL_REQUIRES_UNCAP char(1)  ,
	SKILL_UNLOCK_LEVEL   number(2)  ,
	PART_NAME            varchar2(50)  NOT NULL,
	FRAG_1               float(8) DEFAULT 0 NOT NULL,
	FRAG_20              float(8) DEFAULT 0 NOT NULL,
	PROG_1               float(8) DEFAULT 0 NOT NULL,
	PROG_20              float(8) DEFAULT 0 NOT NULL,
	OVERDRIVE_1          float(8) DEFAULT 0 NOT NULL,
	OVERDRIVE_20         float(8) DEFAULT 0 NOT NULL,
	CONSTRAINT PK_PARTNER_PAT_ID PRIMARY KEY ( PART_ID ) 
 );

CREATE TABLE SONG ( 
	SONG_ID              varchar2(30)  NOT NULL,
	TITLE_LOCAL_EN       varchar2(50)  NOT NULL,
	TITLE_LOCAL_JP       varchar2(50)  ,
	TITLE_LOCAL_KO       varchar2(50)  ,
	TITLE_LOCAL_ZH_HANT  varchar2(50)  ,
	TITLE_LOCAL_ZH_HANS  varchar2(50)  ,
	ARTIST               varchar2(50)  NOT NULL,
	BPM                  varchar2(12) DEFAULT 100 NOT NULL,
	BPM_BASE             number(3) DEFAULT 100 NOT NULL,
	PACK_NAME            varchar2(15)  NOT NULL,
	PURCHASE             varchar2(20)  ,
	AUDIO_PREVIEW        number(6) DEFAULT 0 NOT NULL,
	AUDIO_PREVIEW_END    number(6) DEFAULT 0 NOT NULL,
	SIDE                 number(1) DEFAULT 0 NOT NULL,
	WORLD_UNLOCK         char(1)  ,
	BG                   varchar2(30)  ,
	ADD_DATE             number(13) DEFAULT 1491868801000 NOT NULL,
	VERSION              varchar2(10) DEFAULT 1.0 ,
	REMOTE_DL            char(1)  ,
	CHECKSUM             char(32)  ,
	CONSTRAINT PK_SONG_SONG_ID PRIMARY KEY ( SONG_ID ) 
 );

CREATE TABLE WORLD_ITEM ( 
	ITEM_NAME            varchar2(30)  NOT NULL,
	CONSTRAINT PK_WORLD_ITEMS_NAME PRIMARY KEY ( ITEM_NAME ) 
 );

CREATE TABLE WORLD_MAP ( 
	AVAILABLE_FROM       number(13) DEFAULT -1 NOT NULL,
	AVAILABLE_TO         number(13) DEFAULT 2106124800000 NOT NULL,
	BEYOND_HEALTH        number(3) DEFAULT 100 NOT NULL,
	CHAPTER              number(9)  NOT NULL,
	COORDINATE           varchar2(15)  NOT NULL,
	CUSTOM_BG            varchar2(13)  ,
	IS_BEYOND            char(1)  ,
	IS_LEGACY            char(1)  ,
	IS_REPEATABLE        char(1)  ,
	MAP_ID               varchar2(30)  NOT NULL,
	REQUIRE_ID           varchar2(50)  ,
	REQUIRE_TYPE         varchar2(15)  ,
	REQUIRE_VALUE        number(3) DEFAULT 0 ,
	STAMINA_COST         number(1)  NOT NULL,
	STEP_COUNT           number(3)  NOT NULL,
	CONSTRAINT PK_WORLD_MAP_MPA_ID PRIMARY KEY ( MAP_ID ) 
 );

CREATE TABLE WORLD_SONG ( 
	ITEM_NAME            varchar2(30)  NOT NULL,
	CONSTRAINT PK_WORLD_SONG_ITEM_NAME PRIMARY KEY ( ITEM_NAME ) 
 );

CREATE TABLE CHART_INFO ( 
	SONG_ID              varchar2(30)  NOT NULL,
	DIFFICULTY           number(1)  NOT NULL,
	CHART_DESIGNER       varchar2(50)  ,
	JACKET_DESIGNER      varchar2(50)  ,
	RATING               number(3,1) DEFAULT 0 NOT NULL,
	REMOTE_DL            char(1)  ,
	CHECKSUM             char(32)  ,
	CONSTRAINT IDX_CHART_INFO PRIMARY KEY ( SONG_ID, DIFFICULTY ) 
 );

CREATE TABLE MAP_AFFINITY ( 
	MAP_ID               varchar2(20)  NOT NULL,
	PART_ID              number(2)  NOT NULL,
	MULTIPLIER           float(3)  NOT NULL,
	CONSTRAINT IDX_MAP_AFFINITY PRIMARY KEY ( MAP_ID, PART_ID ) 
 );

CREATE TABLE MAP_REWARD ( 
	MAP_ID               varchar2(30)  NOT NULL,
	REWARD_ID            varchar2(50)  ,
	ITEM_TYPE            varchar2(20)  NOT NULL,
	AMOUNT               number(4) DEFAULT 0 ,
	POSITION             number(4) DEFAULT 1 NOT NULL
 );

CREATE INDEX IDX_MAP_REWARD ON MAP_REWARD ( MAP_ID );

CREATE TABLE SINGLE ( 
	SONG_ID              varchar2(30)  NOT NULL,
	CONSTRAINT PK_SINGLES_SONG_ID PRIMARY KEY ( SONG_ID ) 
 );

CREATE TABLE BEST_SCORE ( 
	USER_ID              number(9)  NOT NULL,
	PLAYED_DATE          number(10) DEFAULT 1491868801 NOT NULL,
	CONSTRAINT IDX_BEST_SCORE PRIMARY KEY ( USER_ID, PLAYED_DATE ) 
 );

CREATE TABLE CORE_POSSESS_INFO ( 
	CORE_ID              number(2)  NOT NULL,
	USER_ID              number(9)  NOT NULL,
	AMOUNT               number(2) DEFAULT 0 NOT NULL,
	CONSTRAINT IDX_CORE_POESS_I PRIMARY KEY ( CORE_ID, USER_ID ) 
 );

CREATE TABLE DATA_BACKUP ( 
	USER_ID              number(9)  NOT NULL,
	BACKUP_DATA          long  ,
	CONSTRAINT PK_DATA_BACK_UP_USER_ID PRIMARY KEY ( USER_ID ) 
 );

CREATE TABLE DL_REQUEST ( 
	USER_ID              number(9)  NOT NULL,
	SONG_ID              varchar2(50)  NOT NULL,
	REQUEST_TIME         number(10)  NOT NULL,
	CONSTRAINT IDX_DL_REQUEST UNIQUE ( USER_ID, SONG_ID, REQUEST_TIME ) 
 );

CREATE TABLE FRIEND_LIST ( 
	USER_ID              number(9)  NOT NULL,
	FRIEND_ID            number(9)  NOT NULL,
	IS_MUTUAL            char(1)  ,
	CONSTRAINT IDX_FRIEND_LIST PRIMARY KEY ( USER_ID, FRIEND_ID ) 
 );

CREATE TABLE PACK_PURCHASE_INFO ( 
	USER_ID              number(9)  NOT NULL,
	PACK_NAME            varchar2(30)  NOT NULL
 );

CREATE TABLE PART_STATS ( 
	USER_ID              number(9)  NOT NULL,
	PART_ID              number(3)  NOT NULL,
	IS_UNCAPPED_OVERRIDE char(1)  ,
	IS_UNCAPPED          char(1)  ,
	EXP_VAL              float(11) DEFAULT 0 NOT NULL,
	OVERDRIVE            float(8) DEFAULT 0 NOT NULL,
	PROG                 float(8) DEFAULT 0 NOT NULL,
	FRAG                 float(8) DEFAULT 0 NOT NULL,
	LV                   number(2) DEFAULT 1 NOT NULL,
	PROG_TEMPEST         number(2) DEFAULT 0 ,
	CONSTRAINT IDX_PART_STATUS PRIMARY KEY ( USER_ID, PART_ID ) 
 );

CREATE TABLE PLAYER ( 
	USER_ID              number(9)  NOT NULL,
	LAST_DEVICE_ID       varchar2(36)  ,
	EMAIL                varchar2(320)  NOT NULL,
	PWDHASH              varchar2(64)  NOT NULL,
	USER_NAME            varchar2(20)  NOT NULL,
	USER_CODE            number(9)  NOT NULL,
	DISPLAY_NAME         varchar2(20)  ,
	TICKET               integer DEFAULT 0 NOT NULL,
	PARTNER              number(2)  ,
	IS_LOCKED_NAME_DUPLICATED char(1)  ,
	IS_SKILL_SEALED      char(1)  ,
	CURR_MAP             varchar2(30)  ,
	PROG_BOOST           number(1) DEFAULT 0 ,
	STAMINA              number(2) DEFAULT 12 NOT NULL,
	NEXT_FRAGSTAM_TS     number(10) DEFAULT -1 NOT NULL,
	MAX_STAMINA_TS       number(10) DEFAULT -1 NOT NULL,
	MAX_STAMINA_NOTIFICATION char(1)  ,
	IS_HIDE_RATING       char(1)  ,
	FAVORITE_PARTNER     number(2)  ,
	RECENT_SCORE_DATE    number(10)  ,
	MAX_FRIEND           number(2) DEFAULT 10 NOT NULL,
	RATING               number(8) DEFAULT 0 NOT NULL,
	JOIN_DATE            number(13) DEFAULT 1491868801000 NOT NULL,
	SCORE_TOKEN          varchar2(64)  ,
	CONSTRAINT IDX_USER_FRIEND_CODE UNIQUE ( USER_CODE ) ,
	CONSTRAINT IDX_USER_EMAIL UNIQUE ( EMAIL ) ,
	CONSTRAINT PK_PLAYER_USER_ID PRIMARY KEY ( USER_ID ) 
 );

COMMENT ON TABLE PLAYER IS 'sotre user infomation';

COMMENT ON COLUMN PLAYER.USER_ID IS 'user id for system to recognize each user, distribute in registration date order.';

COMMENT ON COLUMN PLAYER.USER_CODE IS 'fix length (9 digits) code, used when player add another player as friend.';

COMMENT ON COLUMN PLAYER.TICKET IS 'ticket for buying songs in game.';

COMMENT ON COLUMN PLAYER.CURR_MAP IS 'map that player is currently working on.';

COMMENT ON COLUMN PLAYER.STAMINA IS 'stamina for play in world mode.';

COMMENT ON COLUMN PLAYER.NEXT_FRAGSTAM_TS IS 'time in second left until next frage-to-stamina exchange is unlocked.';

COMMENT ON COLUMN PLAYER.MAX_STAMINA_TS IS 'time in second left until stamina is fully recover.';

CREATE TABLE PLAYER_MAP_PROG ( 
	USER_ID              number(9)  NOT NULL,
	MAP_ID               varchar2(30)  NOT NULL,
	CURR_CAPTURE         number(3)  NOT NULL,
	CURR_POSITION        number(4)  NOT NULL,
	IS_LOCKED            char(1)  
 );

CREATE TABLE RECENT_SCORE ( 
	USER_ID              number(9)  NOT NULL,
	PLAYED_DATE          number(10)  NOT NULL,
	IS_RECENT_10         char(1)  ,
	CONSTRAINT IDX_RECENT_PLAYE PRIMARY KEY ( USER_ID, PLAYED_DATE ) 
 );

CREATE TABLE SCORE ( 
	USER_ID              number(9)  NOT NULL,
	PLAYED_DATE          number(10) DEFAULT 1491868801 NOT NULL,
	SONG_ID              varchar2(30)  NOT NULL,
	DIFFICULTY           number(1)  NOT NULL,
	SCORE                number(8)  NOT NULL,
	SHINY_PURE           number(8)  NOT NULL,
	PURE                 number(8)  NOT NULL,
	FAR                  number(8)  NOT NULL,
	LOST                 number(8)  NOT NULL,
	RATING               number(8,6)  NOT NULL,
	HEALTH               number(3)  NOT NULL,
	MODIFIER             number(8)  ,
	BEYOND_GAGUE         number(3)  ,
	CLEAR_TYPE           number(1)  NOT NULL,
	CONSTRAINT IDX_SCORE PRIMARY KEY ( USER_ID, PLAYED_DATE ) ,
	CONSTRAINT UNQ_SCORE_PLAYED_DATE UNIQUE ( PLAYED_DATE ) 
 );

CREATE INDEX IDX_PLAY_RECORD_UID ON SCORE ( USER_ID );

CREATE INDEX IDX_SCORE_SONG_ID ON SCORE ( SONG_ID );

CREATE TABLE SINGLE_PURCHASE_INFO ( 
	USER_ID              number(9)  NOT NULL,
	SONG_ID              varchar2(30)  NOT NULL
 );

CREATE TABLE WORLD_SONG_UNLOCK ( 
	USER_ID              number(9)  NOT NULL,
	ITEM_NAME            varchar2(30)  NOT NULL,
	CONSTRAINT IDX_WORLD_SONG_U PRIMARY KEY ( USER_ID, ITEM_NAME ) 
 );

CREATE TABLE WORLD_UNLOCK ( 
	USER_ID              number(9)  NOT NULL,
	ITEM_NAME            varchar2(30)  NOT NULL
 );

ALTER TABLE BEST_SCORE ADD CONSTRAINT FK_BEST_SCORE_SCORE FOREIGN KEY ( USER_ID, PLAYED_DATE ) REFERENCES SCORE( USER_ID, PLAYED_DATE );

ALTER TABLE CHART_INFO ADD CONSTRAINT FK_CHART_INFO_SONG FOREIGN KEY ( SONG_ID ) REFERENCES SONG( SONG_ID );

ALTER TABLE CORE_POSSESS_INFO ADD CONSTRAINT FK_CORE_POESS_INFO_CORES FOREIGN KEY ( CORE_ID ) REFERENCES CORE( CORE_ID );

ALTER TABLE CORE_POSSESS_INFO ADD CONSTRAINT FK_CORE_POESS_INFO_PLAYER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE DATA_BACKUP ADD CONSTRAINT FK_DATA_BACK_UP_PLAYER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE DL_REQUEST ADD CONSTRAINT FK_DL_REQUEST_SONG FOREIGN KEY ( SONG_ID ) REFERENCES SONG( SONG_ID );

ALTER TABLE DL_REQUEST ADD CONSTRAINT FK_DL_REQUEST_PLAYER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE FRIEND_LIST ADD CONSTRAINT FK_FRIEND_LIST_PARTNER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE FRIEND_LIST ADD CONSTRAINT FK_FRIEND_LIST_PLAYER FOREIGN KEY ( FRIEND_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE MAP_AFFINITY ADD CONSTRAINT FK_MAP_AFFINITY_WORLD_MAP FOREIGN KEY ( MAP_ID ) REFERENCES WORLD_MAP( MAP_ID );

ALTER TABLE MAP_AFFINITY ADD CONSTRAINT FK_MAP_AFFINITY_PARTNER FOREIGN KEY ( PART_ID ) REFERENCES PARTNER( PART_ID );

ALTER TABLE MAP_REWARD ADD CONSTRAINT FK_MAP_REWARD_WORLD_MAP FOREIGN KEY ( MAP_ID ) REFERENCES WORLD_MAP( MAP_ID );

ALTER TABLE PACK_ITEM ADD CONSTRAINT FK_PACK_ITEM_PACK FOREIGN KEY ( PACK_NAME ) REFERENCES PACK( PACK_NAME );

ALTER TABLE PACK_PURCHASE_INFO ADD CONSTRAINT FK_PACK_POESS_INFO_PACKS FOREIGN KEY ( PACK_NAME ) REFERENCES PACK( PACK_NAME );

ALTER TABLE PACK_PURCHASE_INFO ADD CONSTRAINT FK_PACK_POESS_INFO_PLAYER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE PART_STATS ADD CONSTRAINT FK_PART_POSS_INFO_PARTNER FOREIGN KEY ( PART_ID ) REFERENCES PARTNER( PART_ID );

ALTER TABLE PART_STATS ADD CONSTRAINT FK_PART_POSS_INFO_USER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE PART_STATS ADD CONSTRAINT FK_CHAR_STATUS_LEVEL_EXP FOREIGN KEY ( LV ) REFERENCES LEVEL_EXP( LV );

ALTER TABLE PLAYER ADD CONSTRAINT FK_USER_WORLD_MAP FOREIGN KEY ( CURR_MAP ) REFERENCES WORLD_MAP( MAP_ID );

ALTER TABLE PLAYER ADD CONSTRAINT FK_PLAYER_CHARACTER FOREIGN KEY ( PARTNER ) REFERENCES PARTNER( PART_ID );

ALTER TABLE PLAYER ADD CONSTRAINT FK_PLAYER_SCORE FOREIGN KEY ( RECENT_SCORE_DATE ) REFERENCES SCORE( PLAYED_DATE );

ALTER TABLE PLAYER_MAP_PROG ADD CONSTRAINT FK_PLAYER_MAP_PROG_PLAYER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE PLAYER_MAP_PROG ADD CONSTRAINT FK_PLAYER_MAP_PROG_WORLD_MAP FOREIGN KEY ( MAP_ID ) REFERENCES WORLD_MAP( MAP_ID );

ALTER TABLE RECENT_SCORE ADD CONSTRAINT FK_RECENT_PLAYED_SCORE FOREIGN KEY ( USER_ID, PLAYED_DATE ) REFERENCES SCORE( USER_ID, PLAYED_DATE );

ALTER TABLE SCORE ADD CONSTRAINT FK_PLAY_RECORD_SONG FOREIGN KEY ( SONG_ID ) REFERENCES SONG( SONG_ID );

ALTER TABLE SCORE ADD CONSTRAINT FK_PLAY_RECORD_USER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE SINGLE ADD CONSTRAINT FK_SINGLES_SONG FOREIGN KEY ( SONG_ID ) REFERENCES SONG( SONG_ID );

ALTER TABLE SINGLE_PURCHASE_INFO ADD CONSTRAINT FK_SINGLE_POESS_INFO_PLAYER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE SINGLE_PURCHASE_INFO ADD CONSTRAINT FK_SINGLE_POESS_INFO_SONG FOREIGN KEY ( SONG_ID ) REFERENCES SINGLE( SONG_ID );

ALTER TABLE SONG ADD CONSTRAINT FK_SONG_PACKS FOREIGN KEY ( PACK_NAME ) REFERENCES PACK( PACK_NAME );

ALTER TABLE WORLD_SONG_UNLOCK ADD CONSTRAINT FK_WORLD_SONG_UNLOCK FOREIGN KEY ( ITEM_NAME ) REFERENCES WORLD_SONG( ITEM_NAME );

ALTER TABLE WORLD_SONG_UNLOCK ADD CONSTRAINT FK_WORLD_SONG_UNLOCK_PLAYER FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

ALTER TABLE WORLD_UNLOCK ADD CONSTRAINT FK_WORLD_ITEM_POESS_INFO FOREIGN KEY ( ITEM_NAME ) REFERENCES WORLD_ITEM( ITEM_NAME );

ALTER TABLE WORLD_UNLOCK ADD CONSTRAINT FK_USER_ID FOREIGN KEY ( USER_ID ) REFERENCES PLAYER( USER_ID );

